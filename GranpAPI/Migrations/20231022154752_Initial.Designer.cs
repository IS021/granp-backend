// <auto-generated />
using System;
using Granp.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace GranpAPI.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20231022154752_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.12")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Granp.Models.Entities.Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("ElderBirthDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ElderDescription")
                        .HasColumnType("text");

                    b.Property<string>("ElderFirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ElderLastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ElderPhoneNumber")
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("NumberOfReviews")
                        .HasColumnType("integer");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<float?>("Rating")
                        .HasColumnType("real");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("Granp.Models.Entities.CustomerReview", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<int>("FromId")
                        .HasColumnType("integer");

                    b.Property<int>("Rating")
                        .HasColumnType("integer");

                    b.Property<int>("ToId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("FromId");

                    b.HasIndex("ToId");

                    b.ToTable("CustomerReviews");
                });

            modelBuilder.Entity("Granp.Models.Entities.Professional", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<double>("HourlyRate")
                        .HasColumnType("double precision");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("LongTimeJob")
                        .HasColumnType("boolean");

                    b.Property<int>("MaxDistance")
                        .HasColumnType("integer");

                    b.Property<int>("NumberOfReviews")
                        .HasColumnType("integer");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Profession")
                        .HasColumnType("integer");

                    b.Property<float>("Rating")
                        .HasColumnType("real");

                    b.Property<bool>("ShortTimeJob")
                        .HasColumnType("boolean");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("WeeksInAdvance")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Professionals");
                });

            modelBuilder.Entity("Granp.Models.Entities.ProfessionalReview", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<int>("FromId")
                        .HasColumnType("integer");

                    b.Property<int>("Rating")
                        .HasColumnType("integer");

                    b.Property<int>("ToId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("FromId");

                    b.HasIndex("ToId");

                    b.ToTable("ProfessionalReviews");
                });

            modelBuilder.Entity("Granp.Models.Entities.Customer", b =>
                {
                    b.OwnsOne("Granp.Models.Types.Address", "ElderAddress", b1 =>
                        {
                            b1.Property<int>("CustomerId")
                                .HasColumnType("integer");

                            b1.Property<string>("City")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<string>("Street")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<string>("StreetNumber")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<string>("ZipCode")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.HasKey("CustomerId");

                            b1.ToTable("Customers");

                            b1.WithOwner()
                                .HasForeignKey("CustomerId");

                            b1.OwnsOne("Granp.Models.Types.Location", "Location", b2 =>
                                {
                                    b2.Property<int>("AddressCustomerId")
                                        .HasColumnType("integer");

                                    b2.Property<double>("Latitude")
                                        .HasColumnType("double precision");

                                    b2.Property<double>("Longitude")
                                        .HasColumnType("double precision");

                                    b2.HasKey("AddressCustomerId");

                                    b2.ToTable("Customers");

                                    b2.WithOwner()
                                        .HasForeignKey("AddressCustomerId");
                                });

                            b1.Navigation("Location")
                                .IsRequired();
                        });

                    b.Navigation("ElderAddress")
                        .IsRequired();
                });

            modelBuilder.Entity("Granp.Models.Entities.CustomerReview", b =>
                {
                    b.HasOne("Granp.Models.Entities.Professional", "From")
                        .WithMany("WrittenReviews")
                        .HasForeignKey("FromId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Granp.Models.Entities.Customer", "To")
                        .WithMany("ReceivedReviews")
                        .HasForeignKey("ToId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("From");

                    b.Navigation("To");
                });

            modelBuilder.Entity("Granp.Models.Entities.Professional", b =>
                {
                    b.OwnsOne("Granp.Models.Types.Address", "Address", b1 =>
                        {
                            b1.Property<int>("ProfessionalId")
                                .HasColumnType("integer");

                            b1.Property<string>("City")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<string>("Street")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<string>("StreetNumber")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<string>("ZipCode")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.HasKey("ProfessionalId");

                            b1.ToTable("Professionals");

                            b1.WithOwner()
                                .HasForeignKey("ProfessionalId");

                            b1.OwnsOne("Granp.Models.Types.Location", "Location", b2 =>
                                {
                                    b2.Property<int>("AddressProfessionalId")
                                        .HasColumnType("integer");

                                    b2.Property<double>("Latitude")
                                        .HasColumnType("double precision");

                                    b2.Property<double>("Longitude")
                                        .HasColumnType("double precision");

                                    b2.HasKey("AddressProfessionalId");

                                    b2.ToTable("Professionals");

                                    b2.WithOwner()
                                        .HasForeignKey("AddressProfessionalId");
                                });

                            b1.Navigation("Location")
                                .IsRequired();
                        });

                    b.OwnsOne("Granp.Models.Types.TimeTable", "TimeTable", b1 =>
                        {
                            b1.Property<int>("ProfessionalId")
                                .HasColumnType("integer");

                            b1.HasKey("ProfessionalId");

                            b1.ToTable("Professionals");

                            b1.WithOwner()
                                .HasForeignKey("ProfessionalId");

                            b1.OwnsMany("Granp.Models.Types.TimeSlot", "TimeSlots", b2 =>
                                {
                                    b2.Property<int>("TimeTableProfessionalId")
                                        .HasColumnType("integer");

                                    b2.Property<int>("Id")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("integer");

                                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b2.Property<int>("Id"));

                                    b2.Property<int>("DayOfWeek")
                                        .HasColumnType("integer");

                                    b2.Property<TimeSpan>("EndTime")
                                        .HasColumnType("interval");

                                    b2.Property<TimeSpan>("StartTime")
                                        .HasColumnType("interval");

                                    b2.HasKey("TimeTableProfessionalId", "Id");

                                    b2.ToTable("TimeSlot");

                                    b2.WithOwner()
                                        .HasForeignKey("TimeTableProfessionalId");
                                });

                            b1.Navigation("TimeSlots");
                        });

                    b.Navigation("Address")
                        .IsRequired();

                    b.Navigation("TimeTable")
                        .IsRequired();
                });

            modelBuilder.Entity("Granp.Models.Entities.ProfessionalReview", b =>
                {
                    b.HasOne("Granp.Models.Entities.Customer", "From")
                        .WithMany("WrittenReviews")
                        .HasForeignKey("FromId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Granp.Models.Entities.Professional", "To")
                        .WithMany("ReceivedReviews")
                        .HasForeignKey("ToId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("From");

                    b.Navigation("To");
                });

            modelBuilder.Entity("Granp.Models.Entities.Customer", b =>
                {
                    b.Navigation("ReceivedReviews");

                    b.Navigation("WrittenReviews");
                });

            modelBuilder.Entity("Granp.Models.Entities.Professional", b =>
                {
                    b.Navigation("ReceivedReviews");

                    b.Navigation("WrittenReviews");
                });
#pragma warning restore 612, 618
        }
    }
}
